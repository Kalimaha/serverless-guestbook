Resources:

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: serverless-guestbook
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Resource:
              - "arn:aws:s3:::serverless-guestbook/*"
            Action:
              - "s3:GetObject"

  CustomResourcePopulateS3:
    Type: "Custom::PopulateS3"
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt [ LambdaPopulateS3, Arn ]

  LambdaPopulateS3:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: PopulateS3
      Handler: index.handler
      Role: !GetAtt [ LambdaFunctionRole, Arn ]
      Runtime: nodejs4.3
      Code:
        ZipFile: >
          var awsSdk = require('aws-sdk');
          var response = require('cfn-response');

          exports.handler = function(event, context) {
            var s3 = new awsSdk.S3()
            var html = `
              <html>
                <head>
                  <title>Serverless Guestbook</title>
                  <script type="text/javascript" src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
                  <script type="text/javascript">
                    const get_url   = "http://jsonplaceholder.typicode.com/users"
                    const post_url  = "http://jsonplaceholder.typicode.com/posts"
                    const list_messages = (messages) => { for (m of messages) $("#list").append(format(m)) }
                    const format = (m) => '<li>' + m.message + '<br><small>posted by ' + m.author + ' on ' + m.date + '</small></li>'
                    const load_messages = () => $.get({ url: get_url }).then((messages) => list_messages(messages))
                    const form_is_valid = () => $("#m").val().length > 0 && $("#a").val().length > 0
                    const post_message = () => {
                      if (form_is_valid()) {
                        $("#list").empty()
                        $.post({
                          url:  post_url,
                          data: { message: $("#m").val(), author: $("#a").val(), date: new Date().toISOString() }
                        }).then(() => load_messages())
                      } else alert("Please type a message and the author name!")
                    }
                  </script>
                  <style>
                    li { margin-bottom: 1rem; }
                  </style>
                </head>
                <body onload="load_messages()">
                  <hr>
                  <b>New message: </b>
                  <input id="m" placeholder="e.g. Hallo, world!">
                  <b>by </b>
                  <input id="a" placeholder="e.g. John Doe">
                  <button onclick="post_message()">Post</button>
                  <hr>
                  <ul id="list"></ul>
                  <hr>
                </body>
              </html>
            `
            var params = {
              Body: html,
              Bucket: 'serverless-guestbook',
              Key: 'index.html',
              ContentType: 'text/html',
              ContentLanguage: 'html'
            }
            s3.putObject(params, function(err, data) {
              if (err) response.send(event, context, response.FAILURE, data)
              else     response.send(event, context, response.SUCCESS, data)
            })
          }

  DB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: Messages
      AttributeDefinitions:
        - AttributeName: MessageID
          AttributeType: S
      KeySchema:
        - AttributeName: MessageID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaGet:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: GetMessages
      Handler: index.handler
      Role: !GetAtt [ LambdaFunctionRole, Arn ]
      Runtime: python2.7
      Code:
        ZipFile: >
          import boto3

          def handler(event, context):
              messages = []
              db_client = boto3.client('dynamodb')
              items = db_client.scan(TableName='Messages', Select='ALL_ATTRIBUTES')['Items']
              for item in items:
                  messages.append({
                      'message': item['Message']['S'],
                      'author': item['Author']['S'],
                      'date': item['Date']['S']
                  })
              return sorted(messages, key=lambda msg: msg['date'], reverse=True)

  LambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
            Effect: Allow
      Policies:
        - PolicyName: Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "arn:aws:logs:*:*:*"
                Action:
                  - "logs:*"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "lambda:InvokeFunction"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "dynamodb:*"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "s3:*"

  APIGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: serverless-guestbook-gateway

  APIGatewayRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: [ "sts:AssumeRole" ]
            Effect: Allow
            Principal:
              Service: [ "apigateway.amazonaws.com" ]
      Path: "/"
      Policies:
        - PolicyName: PermitLambdaAndLog
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: [ "lambda:InvokeFunction" ]
                Resource: [ "*" ]
              - Effect: Allow
                Action: [ "logs:*" ]
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Resource: "*"
                Action: [ "dynamodb:*" ]

  GetMessagesREST:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Credentials: !GetAtt [ APIGatewayRole, Arn ]
        IntegrationHttpMethod: POST
        Type: AWS
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri:
          !Join
            - ""
            -
              - "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/"
              - !GetAtt [ LambdaGet, Arn ]
              - "/invocations"
      ResourceId: !GetAtt [ APIGateway, "RootResourceId" ]
      RestApiId: !Ref APIGateway

  APIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: GetMessagesREST
    Properties:
      RestApiId: !Ref APIGateway
      StageName: serverlessguestbookdeployment

  APIStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref APIDeployment
      RestApiId: !Ref APIGateway
      StageName: serverlessguestbook

  APIAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt [ CloudWatchRole, Arn ]

  CloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
        - Effect: Allow
          Principal:
           Service:
            - "apigateway.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
       - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
